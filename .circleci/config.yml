version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3
  aws-cli: circleci/aws-cli@2.0.6

jobs:
  linting:
    docker:
      - image: python:3.7.3-stretch
    working_directory: /venv
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv ~/.venv
            source ~/.venv/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            source ~/.venv/bin/activate
            make lint

  build-image:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Check Docker installed
          command:
            docker --version
            sudo systemctl status docker
            sudo systemctl start docker
      - run:
          name: Build Docker image
          command: |
            ./run_docker.sh
      - run:
          name: Push Docker image
          command: |
            ./push_docker.sh

  cfn-lint:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - run:
          name: Validate CloudFormation template
          command: pip install cfn-lint && cfn-lint ekscfn.yml


  deploy-image:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - setup_remote_docker
      - run: apk add --update tar gzip nodejs npm curl
      - run: pip install awscli
      - aws-cli/setup:
            aws-access-key-id: AWS_ACCESS_KEY
            aws-secret-access-key: AWS_ACCESS_SECRET
            aws-region: AWS_REGION_NAME
      - run:
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
      - run:
          name: Build EKS cluster
          command: |
            aws cloudformation create-stack --stack-name myCapstoneProject --region us-east-1 --template-body file://ekscfn.yml --capabilities CAPABILITY_IAM
            aws cloudformation describe-stacks
#      - run:
#          name: Deploy Docker image to EKS
#          command: |
#            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 182785921749.dkr.ecr.us-east-1.amazonaws.com
#            docker tag capstone:latest 182785921749.dkr.ecr.us-east-1.amazonaws.com/capstone:latest
#            kubectl get nodes
#            kubectl create deploy capstone --image=techyshell/capstone:v1.0.0
#            kubectl get deploy,rs,svc,pods
#            kubectl port-forward pod/capstone-75ddcd84f7-mmmgz --address 0.0.0.0 5001:5001

  delete-cluster:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Delete EKS cluster
          command: |
            eksctl delete cluster --region=us-east-1 --name=myCapstoneProject


workflows:
  build:
    jobs:
      - linting
      - build-image:
          requires: [linting]
      - cfn-lint:
          requires: [build-image]
      - deploy-image:
          requires: [build-image]
#      - delete-cluster:
#          requires: [delay]

